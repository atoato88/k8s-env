---
persistentVolume:
  storageClass: "slow"

elasticsearch:
  url: http://escluster-elasticsearch:9200

extraPorts:
  - name: "syslog-udp"
    containerPort: 514
    servicePort: 514
    protocol: "UDP"
  - name: "syslog-tcp"
    containerPort: 514
    servicePort: 514
    protocol: "TCP"

pipelineFiles:
    default.conf: ""
    00-comm-input.conf: |-
      input {
        tcp {
          port => "5044"
          add_field => [ "tcp_recv" , "1" ]
        }
        syslog {
          tags => [ "elk_send_syslog_es" ]
          type => "syslog"
        }
      }

      filter {
        if [tcp_recv] == "1" {
          json {
            source => "message"
          }
          grok {
              match => ["path","/(?<filename>.*)"]
          }
          mutate {
              gsub => ["filename","/","_"]
          }
        } else if [type] == "syslog" {
          if "_grokparsefailure_sysloginput" in [tags] {
            mutate {
             remove_field => [ "facility", "severity" ]
            }
          } else {
               if [program] {
               } else {
                   mutate {
                       replace => { "program" => "" }
                   }
               }
          }
        } else if "elk_agent" in [tags] {
          grok {
              match => ["path","/(?<filename>.*)"]
          }
          mutate {
              gsub => [ "filename", "-\d{8}$", "" ]
              gsub => [ "filename", "\.\d+$", "" ]
              gsub => ["filename","/","_"]
          }
        }
      }

    52-logsave-output.conf: |-
      output {
        if [type] == "syslog" {
          if "_grokparsefailure_sysloginput" in [tags] {
            file {
               codec => line {
                charset => "UTF-8"
                format => "%{message}"
               }
               flush_interval => 0
               path => "/data/%{host}/syslog.%{+YYYYMMdd}"
            }
          } else {
            file {
                codec => line {
                 charset => "UTF-8"
                 format => "%{timestamp} %{logsource} %{program}: %{message}"
                }
                flush_interval => 0
                path => "/data/%{host}/syslog.%{+YYYYMMdd}"
            }
          }
        } else {
          file {
             codec => line {
              charset => "UTF-8"
              format => "%{message}"
             }
            flush_interval => 0
            path => "/data/%{host}/%{filename}.%{+YYYYMMdd}"
          }
        }
      }
